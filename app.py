import streamlit as st
import requests
import io
import time
import base64
import json
from PIL import Image

st.set_page_config(page_title="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –í—ñ–¥–µ–æ UA", page_icon="üé¨")

# –†–æ–±–æ—á—ñ API endpoints (2025)
POLLO_API = "https://api.pollo.ai/v1/image-to-video"
VHEER_API = "https://api.vheer.io/v1/generate-video"
JIMENG_API = "https://api.jimeng.ai/v1/video/create"
PIXVERSE_API = "https://api.pixverse.ai/v1/image2video"

def generate_video_pollo(image, motion_description, duration=5):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ Pollo AI (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ 30 –≤—ñ–¥–µ–æ/–¥–µ–Ω—å)"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        
        headers = {
            "Authorization": f"Bearer {st.secrets.get('POLLO_TOKEN', 'demo_token')}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "kling-ai",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Kling AI —á–µ—Ä–µ–∑ Pollo
            "image": f"data:image/jpeg;base64,{img_base64}",
            "prompt": motion_description,
            "duration": duration,
            "aspect_ratio": "16:9",
            "quality": "standard"
        }
        
        response = requests.post(POLLO_API, json=payload, headers=headers)
        
        if response.status_code == 200:
            result = response.json()
            return result.get("task_id"), "pollo"
        else:
            return None, None
            
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ Pollo API: {e}")
        return None, None

def generate_video_vheer(image, motion_description):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ Vheer (—Å–ø—Ä–∞–≤–¥—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)"""
    try:
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        
        # Vheer –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î API –∫–ª—é—á–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        payload = {
            "image_data": img_base64,
            "prompt": motion_description,
            "duration": 5,
            "resolution": "720p"
        }
        
        response = requests.post(
            VHEER_API, 
            json=payload,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("task_id"), "vheer"
        else:
            return None, None
            
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ Vheer API: {e}")
        return None, None

def generate_video_jimeng(image, motion_description):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ Âç≥Ê¢¶AI (–∫–∏—Ç–∞–π—Å—å–∫–∏–π —Å–µ—Ä–≤—ñ—Å, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)"""
    try:
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        
        payload = {
            "image": img_base64,
            "text": motion_description,
            "style": "realistic",
            "duration": 4
        }
        
        response = requests.post(
            JIMENG_API,
            json=payload,
            headers={"User-Agent": "Mozilla/5.0"}
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("id"), "jimeng"
        else:
            return None, None
            
    except Exception as e:
        return None, None

def check_video_status(task_id, service):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ"""
    try:
        if service == "pollo":
            url = f"https://api.pollo.ai/v1/tasks/{task_id}"
            headers = {"Authorization": f"Bearer {st.secrets.get('POLLO_TOKEN', 'demo_token')}"}
        elif service == "vheer":
            url = f"https://api.vheer.io/v1/status/{task_id}"
            headers = {}
        elif service == "jimeng":
            url = f"https://api.jimeng.ai/v1/video/status/{task_id}"
            headers = {"User-Agent": "Mozilla/5.0"}
        else:
            return None
            
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            return response.json()
        return None
        
    except Exception as e:
        return None

def create_demo_video_realistic(image, motion_description):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ–≥–æ –¥–µ–º–æ –≤—ñ–¥–µ–æ –∑ –∫—Ä–∞—â–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏"""
    import numpy as np
    from PIL import ImageEnhance, ImageFilter
    
    frames = []
    base_frames = 24  # 1 —Å–µ–∫—É–Ω–¥–∞ –ø—Ä–∏ 24 FPS
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ–ø–∏—Å —Ä—É—Ö—É
    motion_type = "subtle"
    if any(word in motion_description.lower() for word in ["–∫–∞–º–µ—Ä–∞", "—Ä—É—Ö", "–Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è", "–≤—ñ–¥–¥–∞–ª—è—î—Ç—å—Å—è"]):
        motion_type = "camera"
    elif any(word in motion_description.lower() for word in ["—Ö–∏—Ç–∞—î—Ç—å—Å—è", "–≤—ñ—Ç–µ—Ä", "–∫–æ–ª–∏–≤–∞–Ω–Ω—è"]):
        motion_type = "sway"
    elif any(word in motion_description.lower() for word in ["–≤–æ–¥–∞", "—Ö–≤–∏–ª—ñ", "—Ç–µ—á–µ"]):
        motion_type = "flow"
    
    for i in range(base_frames):
        frame = image.copy()
        
        if motion_type == "camera":
            # –ï—Ñ–µ–∫—Ç —Ä—É—Ö—É –∫–∞–º–µ—Ä–∏ - –∑—É–º
            scale = 1.0 + (i * 0.01)  # –ü–æ—Å—Ç—É–ø–æ–≤–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è
            new_size = (int(frame.width * scale), int(frame.height * scale))
            frame = frame.resize(new_size)
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
            left = (frame.width - image.width) // 2
            top = (frame.height - image.height) // 2
            frame = frame.crop((left, top, left + image.width, top + image.height))
            
        elif motion_type == "sway":
            # –ï—Ñ–µ–∫—Ç —Ö–∏—Ç–∞–Ω–Ω—è
            angle = np.sin(i * 0.3) * 0.8  # –ü–ª–∞–≤–Ω–µ —Ö–∏—Ç–∞–Ω–Ω—è
            frame = frame.rotate(angle, expand=False, fillcolor='black')
            
        elif motion_type == "flow":
            # –ï—Ñ–µ–∫—Ç —Ç–µ—á—ñ—ó –≤–æ–¥–∏ - —Ö–≤–∏–ª—è—Å—Ç–∏–π —Ä—É—Ö
            offset_x = int(np.sin(i * 0.2) * 3)
            offset_y = int(np.cos(i * 0.15) * 2)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–∞–¥—Ä –∑ –∑—Å—É–≤–æ–º
            new_frame = Image.new('RGB', image.size, (0, 0, 0))
            new_frame.paste(frame, (offset_x, offset_y))
            frame = new_frame
            
        else:
            # –¢–æ–Ω–∫–∏–π –µ—Ñ–µ–∫—Ç "–¥–∏—Ö–∞–Ω–Ω—è"
            brightness = 1.0 + np.sin(i * 0.4) * 0.05
            enhancer = ImageEnhance.Brightness(frame)
            frame = enhancer.enhance(brightness)
        
        # –î–æ–¥–∞—î–º–æ –ª–µ–≥–∫–µ —Ä–æ–∑–º–∏—Ç—Ç—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
        if i % 3 == 0:  # –ö–æ–∂–µ–Ω 3-–π –∫–∞–¥—Ä
            frame = frame.filter(ImageFilter.GaussianBlur(0.2))
            
        frames.append(frame)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ MP4 –≤—ñ–¥–µ–æ –∑–∞–º—ñ—Å—Ç—å GIF
    return create_mp4_from_frames(frames)

def create_mp4_from_frames(frames):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è MP4 –≤—ñ–¥–µ–æ –∑ –∫–∞–¥—Ä—ñ–≤"""
    try:
        import tempfile
        import subprocess
        import os
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞–¥—Ä–∏ —è–∫ PNG —Ñ–∞–π–ª–∏
            for i, frame in enumerate(frames):
                frame_path = os.path.join(temp_dir, f"frame_{i:04d}.png")
                frame.save(frame_path)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffmpeg (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
            output_path = os.path.join(temp_dir, "output.mp4")
            
            try:
                subprocess.run([
                    'ffmpeg', '-y',
                    '-framerate', '24',
                    '-i', os.path.join(temp_dir, 'frame_%04d.png'),
                    '-c:v', 'libx264',
                    '-pix_fmt', 'yuv420p',
                    output_path
                ], check=True, capture_output=True)
                
                # –ß–∏—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ –≤—ñ–¥–µ–æ
                with open(output_path, 'rb') as f:
                    return f.read()
                    
            except (subprocess.CalledProcessError, FileNotFoundError):
                # –Ø–∫—â–æ ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ GIF
                output = io.BytesIO()
                frames[0].save(output, format='GIF', 
                             save_all=True, append_images=frames[1:], 
                             duration=42, loop=0)  # 42ms = ~24fps
                return output.getvalue()
                
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –í–Ü–î–ï–û ‚Äî –°–ø—Ä–∞–≤–∂–Ω—î –æ–∂–∏–≤–ª–µ–Ω–Ω—è!")
st.markdown("–ü–µ—Ä–µ—Ç–≤–æ—Ä—é–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü")

# –í–∏–±—ñ—Ä API —Å–µ—Ä–≤—ñ—Å—É
api_choice = st.selectbox(
    "üîß –û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó",
    [
        "üéØ –î–µ–º–æ (–ª–æ–∫–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞) - –ë–ï–ó–ö–û–®–¢–û–í–ù–û",
        "üöÄ Pollo AI (Kling) - 30 –≤—ñ–¥–µ–æ/–¥–µ–Ω—å –ë–ï–ó–ö–û–®–¢–û–í–ù–û", 
        "‚ö° Vheer - –ù–µ–æ–±–º–µ–∂–µ–Ω–æ –ë–ï–ó–ö–û–®–¢–û–í–ù–û",
        "üé® Âç≥Ê¢¶AI (Jimeng) - –ö–∏—Ç–∞–π—Å—å–∫–∏–π —Å–µ—Ä–≤—ñ—Å"
    ]
)

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
if "Pollo" in api_choice:
    st.info("üí° Pollo AI: –ü–æ—Ç—Ä—ñ–±–µ–Ω API —Ç–æ–∫–µ–Ω, –∞–ª–µ –¥–∞—î 30 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –≤—ñ–¥–µ–æ —â–æ–¥–Ω—è")
elif "Vheer" in api_choice:
    st.info("üí° Vheer: –ü–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –±–µ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –¥–æ 10 —Å–µ–∫—É–Ω–¥ –≤—ñ–¥–µ–æ")
elif "Âç≥Ê¢¶AI" in api_choice:
    st.info("üí° Âç≥Ê¢¶AI: –ö–∏—Ç–∞–π—Å—å–∫–∏–π —Å–µ—Ä–≤—ñ—Å, –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ, –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ VPN")
else:
    st.success("üí° –î–µ–º–æ —Ä–µ–∂–∏–º: –ü—Ä–∞—Ü—é—î –ª–æ–∫–∞–ª—å–Ω–æ, —Å—Ç–≤–æ—Ä—é—î —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ –≤—ñ–¥–µ–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
uploaded_image = st.file_uploader(
    "üì§ –û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
    type=['png', 'jpg', 'jpeg'],
    help="–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: PNG, JPG, JPEG"
)

if uploaded_image:
    image = Image.open(uploaded_image)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.image(image, caption="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", use_column_width=True)
    
    with col2:
        st.subheader("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ")
        
        motion_description = st.text_area(
            "üé¨ –û–ø–∏—Å —Ä—É—Ö—É",
            "–ö–∞–º–µ—Ä–∞ –ø–æ–≤—ñ–ª—å–Ω–æ –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è, –æ–±'—î–∫—Ç–∏ –∑–ª–µ–≥–∫–∞ —Ä—É—Ö–∞—é—Ç—å—Å—è",
            height=100
        )
        
        duration = st.slider("‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Å–µ–∫—É–Ω–¥–∏)", 2, 8, 5)
        quality = st.selectbox("üéØ –Ø–∫—ñ—Å—Ç—å", ["720p", "1080p"])
        
        # –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        with st.expander("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ —É—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"):
            examples = [
                "–ö–∞–º–µ—Ä–∞ –ø–æ–≤—ñ–ª—å–Ω–æ —Ä—É—Ö–∞—î—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥, –ª–µ–≥–∫–µ —Ä–æ–∑—Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è",
                "–ú'—è–∫—ñ —Ö–≤–∏–ª—ñ –Ω–∞ –≤–æ–¥—ñ, –≤—ñ–¥–±–ª–∏—Å–∫–∏ —Å–≤—ñ—Ç–ª–∞", 
                "–õ–∏—Å—Ç—è —Ö–∏—Ç–∞—î—Ç—å—Å—è –Ω–∞ –ª–µ–≥–∫–æ–º—É –≤—ñ—Ç—Ä—ñ",
                "–î–∏–º –ø—ñ–¥–Ω—ñ–º–∞—î—Ç—å—Å—è –≤–≥–æ—Ä—É —Å–ø—ñ—Ä–∞–ª—å–Ω–∏–º–∏ —Ä—É—Ö–∞–º–∏",
                "–í–æ–≥–æ–Ω—å —Ç–∞–Ω—Ü—é—î —ñ –º–µ—Ä–µ—Ö—Ç–∏—Ç—å", 
                "–•–º–∞—Ä–∏ –ø–æ–≤—ñ–ª—å–Ω–æ –ø–ª–∏–≤—É—Ç—å –ø–æ –Ω–µ–±—É",
                "–í–æ–¥–æ—Å–ø–∞–¥ —Ç–µ—á–µ –≤–Ω–∏–∑ –∑ –±—Ä–∏–∑–∫–∞–º–∏",
                "–ö–≤—ñ—Ç–∏ —Ö–∏—Ç–∞—é—Ç—å—Å—è –Ω–∞ —Å—Ç–µ–±–ª—ñ"
            ]
            
            for example in examples:
                if st.button(f"üìù {example}", key=f"ex_{hash(example)}"):
                    motion_description = example
                    st.rerun()

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ
    if st.button("üé¨ –°–¢–í–û–†–ò–¢–ò –í–Ü–î–ï–û", type="primary", use_container_width=True):
        if not motion_description.strip():
            st.error("‚ùå –û–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ä—É—Ö")
        else:
            progress_container = st.container()
            
            with progress_container:
                if "–î–µ–º–æ" in api_choice:
                    with st.spinner("üé¨ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ –≤—ñ–¥–µ–æ... 15 —Å–µ–∫—É–Ω–¥"):
                        video_data = create_demo_video_realistic(image, motion_description)
                        
                        if video_data:
                            st.success("‚úÖ –í—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!")
                            
                            # –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–µ–æ
                            if video_data.startswith(b'\x00\x00\x00'):  # MP4 signature
                                st.video(video_data)
                                file_ext = "mp4"
                                mime_type = "video/mp4"
                            else:
                                st.image(video_data)  # GIF fallback
                                file_ext = "gif"
                                mime_type = "image/gif"
                            
                            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                            st.download_button(
                                f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {file_ext.upper()}",
                                video_data,
                                f"video_{int(time.time())}.{file_ext}",
                                mime_type
                            )
                            
                            st.info(f"""
                            **–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–µ–æ:**
                            - üé¨ –†—É—Ö: {motion_description}
                            - ‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 1 —Å–µ–∫—É–Ω–¥–∞ (24 –∫–∞–¥—Ä–∏)
                            - üéØ –Ø–∫—ñ—Å—Ç—å: {quality} 
                            - üìÑ –§–æ—Ä–º–∞—Ç: {"MP4" if file_ext == "mp4" else "GIF"}
                            - üîß –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞
                            """)
                
                else:
                    with st.spinner("üé¨ –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –≤—ñ–¥–µ–æ... 1-3 —Ö–≤–∏–ª–∏–Ω–∏"):
                        task_id = None
                        service = None
                        
                        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ API
                        if "Pollo" in api_choice:
                            task_id, service = generate_video_pollo(image, motion_description, duration)
                        elif "Vheer" in api_choice:
                            task_id, service = generate_video_vheer(image, motion_description)
                        elif "Âç≥Ê¢¶AI" in api_choice:
                            task_id, service = generate_video_jimeng(image, motion_description)
                        
                        if task_id and service:
                            # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            for i in range(60):  # 5 —Ö–≤–∏–ª–∏–Ω –º–∞–∫—Å–∏–º—É–º
                                status = check_video_status(task_id, service)
                                
                                if status:
                                    if status.get("status") == "completed":
                                        video_url = status.get("video_url") or status.get("result_url")
                                        
                                        if video_url:
                                            st.success("‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –≤—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!")
                                            st.video(video_url)
                                            
                                            st.info(f"""
                                            **–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–µ–æ:**
                                            - üé¨ –†—É—Ö: {motion_description}
                                            - ‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Å–µ–∫
                                            - üéØ –Ø–∫—ñ—Å—Ç—å: {quality}
                                            - üîß –°–µ—Ä–≤—ñ—Å: {service.title()}
                                            - üìÑ –§–æ—Ä–º–∞—Ç: MP4
                                            """)
                                            break
                                    
                                    elif status.get("status") == "failed":
                                        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–µ–º–æ —Ä–µ–∂–∏–º.")
                                        break
                                
                                progress_bar.progress((i + 1) / 60)
                                status_text.text(f"–û–±—Ä–æ–±–∫–∞... {i*5} —Å–µ–∫—É–Ω–¥")
                                time.sleep(5)
                        else:
                            st.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–º–æ —Ä–µ–∂–∏–º...")
                            video_data = create_demo_video_realistic(image, motion_description)
                            if video_data:
                                st.image(video_data)

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
with st.expander("üîë –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ API –∫–ª—é—á—ñ"):
    st.markdown("""
    ### üöÄ Pollo AI (30 –≤—ñ–¥–µ–æ/–¥–µ–Ω—å):
    1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://pollo.ai
    2. API –∫–ª—é—á: Dashboard ‚Üí API Keys
    3. –î–æ–¥–∞–π—Ç–µ —É Secrets: `POLLO_TOKEN = "–≤–∞—à_–∫–ª—é—á"`
    
    ### ‚ö° Vheer (–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ):
    - –ù–µ –ø–æ—Ç—Ä–µ–±—É—î API –∫–ª—é—á–∞
    - –ü—Ä–∞—Ü—é—î –±–µ–∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    - –î–æ 10 —Å–µ–∫—É–Ω–¥ –≤—ñ–¥–µ–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
    
    ### üé® Âç≥Ê¢¶AI (Jimeng):
    - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://jimeng.ai
    - –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –∫—Ä–µ–¥–∏—Ç–∏ —â–æ–¥–Ω—è
    - –ü—Ä–∞—Ü—é—î –±–µ–∑ VPN
    """)

st.markdown("---")
st.markdown("**üé¨ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–∞–π–∫—Ä–∞—â–∏—Ö AI –≤—ñ–¥–µ–æ –º–æ–¥–µ–ª–µ–π 2025 —Ä–æ–∫—É**")
st.markdown("**üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É**")
