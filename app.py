import streamlit as st
import requests
import io
import time
from PIL import Image
import base64

st.set_page_config(page_title="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –í—ñ–¥–µ–æ UA", page_icon="üé¨")

# API endpoints –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
REPLICATE_API = "https://api.replicate.com/v1/predictions"
STABLE_VIDEO_API = "https://api-inference.huggingface.co/models/stabilityai/stable-video-diffusion-img2vid"

def generate_video_replicate(image, motion_description, duration=3):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ Replicate API"""
    headers = {
        "Authorization": f"Bearer {st.secrets.get('REPLICATE_TOKEN', '')}",
        "Content-Type": "application/json"
    }
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_base64 = base64.b64encode(buffered.getvalue()).decode()
    
    payload = {
        "version": "25a2413bf4e23c1cc6e5e07a9005c80b8c17d344a8a9bc4ed8e1fea5ed88d8a2",
        "input": {
            "image": f"data:image/jpeg;base64,{img_base64}",
            "prompt": motion_description,
            "duration": duration,
            "fps": 8
        }
    }
    
    response = requests.post(REPLICATE_API, json=payload, headers=headers)
    if response.status_code == 201:
        prediction = response.json()
        return prediction["id"]
    else:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ API: {response.status_code}")
        return None

def check_prediction_status(prediction_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
    headers = {
        "Authorization": f"Bearer {st.secrets.get('REPLICATE_TOKEN', '')}",
    }
    
    response = requests.get(f"{REPLICATE_API}/{prediction_id}", headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

def generate_video_huggingface(image, motion_description):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ HuggingFace"""
    headers = {
        "Authorization": f"Bearer {st.secrets.get('HF_TOKEN', '')}"
    }
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    
    files = {"inputs": buffered.getvalue()}
    data = {"parameters": {"motion_bucket_id": 127}}
    
    response = requests.post(STABLE_VIDEO_API, headers=headers, files=files, data=data)
    
    if response.status_code == 200:
        return response.content
    return None

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –í—ñ–¥–µ–æ ‚Äî –û–∂–∏–≤–ª—è—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
st.markdown("–ü–µ—Ä–µ—Ç–≤–æ—Ä—é–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –∂–∏–≤—ñ –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü")

# –í–∏–±—ñ—Ä –¥–∂–µ—Ä–µ–ª–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
col1, col2 = st.columns(2)

with col1:
    st.subheader("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    
    tab1, tab2 = st.tabs(["üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª", "üîó –Ü–∑ FLUX –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"])
    
    with tab1:
        uploaded_image = st.file_uploader(
            "–û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            type=['png', 'jpg', 'jpeg'],
            help="–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: PNG, JPG, JPEG"
        )
        
        if uploaded_image:
            image = Image.open(uploaded_image)
            st.image(image, caption="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", use_column_width=True)
    
    with tab2:
        st.markdown("**–í–∞—à FLUX –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:**")
        st.link_button(
            "üé® –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ FLUX",
            "https://realtime-flux-ru.streamlit.app",
            help="–í—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –≤ –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ"
        )
        
        st.info("üí° –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ FLUX –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ, –∑–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç—É—Ç")

with col2:
    if 'uploaded_image' in locals() and uploaded_image:
        st.subheader("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó")
        
        motion_description = st.text_area(
            "üé¨ –û–ø–∏—Å —Ä—É—Ö—É",
            "–ö–∞–º–µ—Ä–∞ –ø–æ–≤—ñ–ª—å–Ω–æ –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è, –æ–±'—î–∫—Ç–∏ –∑–ª–µ–≥–∫–∞ —Ö–∏—Ç–∞—é—Ç—å—Å—è",
            height=100,
            help="–û–ø–∏—à—ñ—Ç—å —è–∫ –º–∞—î —Ä—É—Ö–∞—Ç–∏—Å—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
        )
        
        duration = st.slider(
            "‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Å–µ–∫—É–Ω–¥–∏)",
            min_value=2,
            max_value=6,
            value=3,
            help="–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ—Ä–æ–ª–∏–∫–∞"
        )
        
        fps = st.selectbox(
            "üéØ –Ø–∫—ñ—Å—Ç—å",
            [("–®–≤–∏–¥–∫–æ (8 FPS)", 8), ("–°—Ç–∞–Ω–¥–∞—Ä—Ç (12 FPS)", 12), ("–í–∏—Å–æ–∫–µ (24 FPS)", 24)],
            index=1
        )
        
        # –ü—Ä–∏–∫–ª–∞–¥–∏ –æ–ø–∏—Å—ñ–≤ —Ä—É—Ö—É
        with st.expander("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –æ–ø–∏—Å—ñ–≤ —Ä—É—Ö—É"):
            examples = [
                "–ö–∞–º–µ—Ä–∞ –ø–æ–≤—ñ–ª—å–Ω–æ —Ä—É—Ö–∞—î—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥",
                "–õ–µ–≥–∫–µ —Ö–∏—Ç–∞–Ω–Ω—è –Ω–∞ –≤—ñ—Ç—Ä—ñ",
                "–ú'—è–∫—ñ —Ö–≤–∏–ª—ñ –Ω–∞ –≤–æ–¥—ñ",
                "–ü–ª–∞–≤–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ –æ–±'—î–∫—Ç–∞",
                "–ß–∞—Å—Ç–∏–Ω–∫–∏ –ø–∏–ª—É –ª—ñ—Ç–∞—é—Ç—å —É –ø–æ–≤—ñ—Ç—Ä—ñ",
                "–ú–µ—Ä–µ—Ö—Ç–ª–∏–≤–µ —Å–≤—ñ—Ç–ª–æ —ñ —Ç—ñ–Ω—ñ",
                "–•–º–∞—Ä–∏ –ø–æ–≤—ñ–ª—å–Ω–æ —Ä—É—Ö–∞—é—Ç—å—Å—è",
                "–í—ñ–¥–±–ª–∏—Å–∫–∏ –≥—Ä–∞—é—Ç—å –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω—ñ",
                "–õ–∏—Å—Ç—è —Ç—Ä–µ–ø–µ—â–µ –Ω–∞ –¥–µ—Ä–µ–≤—ñ",
                "–î–∏–º –ø—ñ–¥–Ω—ñ–º–∞—î—Ç—å—Å—è –≤–≥–æ—Ä—É"
            ]
            
            for example in examples:
                if st.button(f"üìù {example}", key=f"example_{example}"):
                    motion_description = example
                    st.rerun()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–µ–æ
if 'uploaded_image' in locals() and uploaded_image and st.button("üé¨ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ", type="primary"):
    if not motion_description.strip():
        st.error("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ä—É—Ö")
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API —Ç–æ–∫–µ–Ω—ñ–≤
        if not st.secrets.get("REPLICATE_TOKEN") and not st.secrets.get("HF_TOKEN"):
            st.error("‚ùå –ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π API —Ç–æ–∫–µ–Ω. –î–æ–¥–∞–π—Ç–µ REPLICATE_TOKEN –∞–±–æ HF_TOKEN –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        else:
            with st.spinner("üé¨ –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 1-3 —Ö–≤–∏–ª–∏–Ω–∏"):
                try:
                    # –ü—Ä–æ–±—É—î–º–æ Replicate API
                    if st.secrets.get("REPLICATE_TOKEN"):
                        prediction_id = generate_video_replicate(image, motion_description, duration)
                        
                        if prediction_id:
                            # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            for i in range(60):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–≤–∏–ª–∏–Ω
                                status = check_prediction_status(prediction_id)
                                
                                if status and status["status"] == "succeeded":
                                    video_url = status["output"]
                                    st.success("‚úÖ –í—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!")
                                    
                                    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–µ–æ
                                    st.video(video_url)
                                    
                                    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
                                    st.info(f"""
                                    **–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–µ–æ:**
                                    - üé¨ –†—É—Ö: {motion_description}
                                    - ‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Å–µ–∫
                                    - üéØ FPS: {fps[1]}
                                    - üìê –†–æ–∑–º—ñ—Ä: {image.size[0]}√ó{image.size[1]}
                                    """)
                                    break
                                    
                                elif status and status["status"] == "failed":
                                    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ")
                                    break
                                    
                                progress_bar.progress((i + 1) / 60)
                                status_text.text(f"–û–±—Ä–æ–±–∫–∞... {i*5} —Å–µ–∫—É–Ω–¥")
                                time.sleep(5)
                    
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –ø—Ä–æ–±—É—î–º–æ HuggingFace
                    elif st.secrets.get("HF_TOKEN"):
                        video_bytes = generate_video_huggingface(image, motion_description)
                        if video_bytes:
                            st.success("‚úÖ –í—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!")
                            st.video(video_bytes)
                        else:
                            st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ HuggingFace")
                    
                except Exception as e:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
st.markdown("---")

col1, col2, col3 = st.columns(3)

with col1:
    st.metric("üé® –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏", "JPG, PNG")

with col2:
    st.metric("‚è±Ô∏è –ß–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó", "1-3 —Ö–≤")

with col3:
    st.metric("üé¨ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ", "2-6 —Å–µ–∫")

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
with st.expander("üìö –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è"):
    st.markdown("""
    ### üöÄ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç:
    
    1. **–°—Ç–≤–æ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è** –≤ –Ω–∞—à–æ–º—É FLUX –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ
    2. **–ó–±–µ—Ä–µ–∂—ñ—Ç—å** –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä
    3. **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ** —Ç—É—Ç —á–µ—Ä–µ–∑ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª"
    4. **–û–ø–∏—à—ñ—Ç—å —Ä—É—Ö** —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏
    5. **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å** "–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ"
    6. **–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è** —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (1-3 —Ö–≤–∏–ª–∏–Ω–∏)
    
    ### üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:
    
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á—ñ—Ç–∫—ñ, –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    - –û–ø–∏—Å—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ñ, –ø–ª–∞–≤–Ω—ñ —Ä—É—Ö–∏
    - –ü–æ—á–∏–Ω–∞–π—Ç–µ –∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–µ–æ (2-3 —Å–µ–∫—É–Ω–¥–∏)
    - –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –æ–ø–∏—Å–∞–º–∏
    
    ### üé¨ –ü—Ä–∏–∫–ª–∞–¥–∏ —É—Å–ø—ñ—à–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤:
    
    - "–í–æ–¥–∞ —Ç–µ—á–µ –≤–Ω–∏–∑ –ø–æ –∫–∞–º–µ–Ω—é"
    - "–í–æ–≥–æ–Ω—å —Ç–∞–Ω—Ü—é—î –≤ –∫–∞–º—ñ–Ω—ñ"
    - "–•–º–∞—Ä–∏ –ø–ª–∏–≤—É—Ç—å –ø–æ –Ω–µ–±—É"
    - "–ö–≤—ñ—Ç–∏ —Ö–∏—Ç–∞—é—Ç—å—Å—è –Ω–∞ –≤—ñ—Ç—Ä—ñ"
    """)

# –ü–æ—Ä–∞–¥–∏ —Ç–∞ –ø—ñ–¥–∫–∞–∑–∫–∏
with st.expander("üéØ –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó"):
    st.markdown("""
    ### –ù–∞–π–∫—Ä–∞—â–µ –ø—Ä–∞—Ü—é—î –∑:
    - üåä **–ü—Ä–∏—Ä–æ–¥–Ω—ñ —Å—Ü–µ–Ω–∏** (–≤–æ–¥–∞, –≤–æ–≥–æ–Ω—å, —Ö–º–∞—Ä–∏)
    - üå∏ **–†–æ—Å–ª–∏–Ω–∏** (–∫–≤—ñ—Ç–∏, –¥–µ—Ä–µ–≤–∞, —Ç—Ä–∞–≤–∞)
    - üèîÔ∏è **–ü–µ–π–∑–∞–∂—ñ** (–≥–æ—Ä–∏, –ø–æ–ª—è, –æ–∑–µ—Ä–∞)
    - üé® **–ü–æ—Ä—Ç—Ä–µ—Ç–∏** (–ª–µ–≥–∫–∏–π —Ä—É—Ö –≤–æ–ª–æ—Å—Å—è, –æ–¥—è–≥—É)
    
    ### –£–Ω–∏–∫–∞–π—Ç–µ:
    - –°–∫–ª–∞–¥–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –æ–±'—î–∫—Ç–∏
    - –ë–∞–≥–∞—Ç–æ –¥—Ä—ñ–±–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
    - –†—ñ–∑–∫—ñ –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω—ñ —Ñ–æ—Ä–º–∏
    - –¢–µ–∫—Å—Ç —ñ –Ω–∞–ø–∏—Å–∏
    """)

st.markdown("---")
st.markdown("**üé¨ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Stable Video Diffusion —Ç–∞ Replicate API**")
st.markdown("**üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è —Ç–≤–æ—Ä—á–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏**")
